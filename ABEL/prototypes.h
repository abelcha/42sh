#ifndef PROTOTYPES_H_
# define PROTOTYPES_H_
void	*free_tree(t_parse_tree *root);
char	*get_env(char **env, char *info);
void	free_tokens(t_token *root);
int	add_token_in_list(t_token *root, const int i);
int	create_new_tree_node(t_parse_tree *root, t_token *token);
int	lex_error(int tk1, int flag, int tk2);
void	fill_env_struct(t_env_dll *elem, char *env_line);
int	add_env_variable(t_env_dll *elem, char *env_line);
t_env_dll	*init_dll();
int	put_env_in_tab(t_env *env, int size);
int	put_env_in_dll(char **envp, t_execution *exe);
void	display_tree(t_parse_tree *root);
t_token	*get_tokens(char *str);
int	wait_pipes(t_execution *exe);
int	exec(t_cmd *cmd, t_execution *exe);
int	exec_cmd(t_parse_tree *root, t_execution *exe);
int	my_exit(t_execution *exe, t_cmd *cmd);
int	my_env(t_execution *exe, t_cmd *cmd);
int	my_setenv(t_execution *exe, t_cmd *cmd);
int	my_unsetenv(t_execution *exe, t_cmd *cmd);
int	my_echo(t_execution *exe, t_cmd *cmd);
int	my_cd(t_execution *exe, t_cmd *cmd);
int	x_free(void *ptr);
void	double_free(char **ptr);
t_execution	*init_exe(char **env);
int	clean_all(t_execution *exe);
int	speed_cmp(char *s, char *s2);
int	my_strcmp(char *s1, char *s2);
c #                    key-click volume (0-100);
c #                    key-click volume (0-100);
c #                    key-click volume (0-100);
int	is_redir(int t);
int	cmd_in_background(t_parse_tree *tmp, t_token *token);
int	add_token_in_node(t_parse_tree *tmp, t_token *token, t_execution *exe);
char	**parsing(char **tab, char *str, int nb, char c);
int	count_len(char *str, char c, int flag);
int	count_word(char *str, char c);
char	**get_paths(char *str, char c);
int	expected_after_pipe();
int	create_new_cmd_node(t_cmd *elem);
int	error_handling(int tk1, int tk2);
int	delete_filename_token(t_token *token, int flag);
t_red	*init_red();
int	add_elem(t_red *elem);
int	redirections(t_cmd *cmd, t_token *token);
int	lexical_error(t_parse_tree *root, t_token *token);
t_parse_tree	*start_parsing(t_token *token, t_execution *exe);
int	is_dir(const char* target);
char	*my_strcat(char *s1, char *s2);
int	is_builtin(t_cmd *cmd, t_execution *exe);
int	find_path(t_cmd *cmd, t_execution *exe);
int	builtin_tab(t_cmd *cmd, t_execution *exe);
int	is_dir(const char* target);
char	*gnl(const int fd);
int	exec_builtins(t_cmd *cmd, t_execution *exe);
int	exec_in_father(t_cmd *root, t_cmd *tmp, t_execution *exe);
int	execution_loop(t_cmd *cmd, t_execution *exe);

#endif /* !PROTOTYPES_H_ */
